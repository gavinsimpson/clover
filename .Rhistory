iso_det = c("DirectBlood", "DirectFecal", "DirectOther", "Tissue", "Fecal", "Isolation", "histopath, e-microscopy", "histopath; e microscopy", "isolation", "Cell culture", "micropsy", "Antibodies and Isolation", "Pathology", "Histopathology", "Histology", "PCR, Isolation", "Cell culture, PCR")
dm$Detection_Isolation = ifelse(dm$DetectionMethod_Original %in% iso_det, TRUE, FALSE)
# composite column of highest quality detection
dm$DetectionMethod_Harmonised = "Not specified"
dm$DetectionMethod_Harmonised[ dm$Detection_Serology == TRUE ] = "Antibodies"
dm$DetectionMethod_Harmonised[ dm$Detection_Genetic == TRUE ] = "PCR/Sequencing"
dm$DetectionMethod_Harmonised[ dm$Detection_Isolation == TRUE ] = "Isolation/Observation"
# combine and save for NCBITaxonomy resolving
assoc = left_join(assoc, dm, by="DetectionMethod_Original")
write.csv(assoc, "./output/intermediate_versions/Clover_reconciledassociations_v1_20201120.csv", row.names=FALSE)
head(assoc)
# ================== Combine GMPD2/HP3/EID2 associations with Shaw viruses and standardise detection methods ==================
# dependencies and basedir
setwd("C:/Users/roryj/Documents/PhD/202011_clover/clover/")
pacman::p_load("RISmed", "dplyr", "magrittr", "rentrez")
# ================= read datasets ================
# read datasets (associations; shaw mammals/viruses only)
assoc = read.csv("./output/hostpathogen_harmonised/AllDatabases_Associations_Hosts_Harmonised_Oct2020.csv", stringsAsFactors = FALSE)
# shaw mammals/viruses and clip pathogen names
shaw = read.csv("./data/Shaw_Database_main.csv", stringsAsFactors = FALSE) %>%
dplyr::filter(HostGroup %in% c("Human", "Ungulates", "Carnivora", "Cetacea", "Rodentia", "Mammalia", "Primates", "Chiroptera")) %>%
dplyr::filter(Type == "Virus") %>%
dplyr::mutate(Species = tolower(Species))
foo = strsplit(shaw$Species, " ")
foo = lapply(foo, function(x){ if(x[length(x)] == "virus"){ return(x[1:length(x)-1]) } else(return(x)) })
foo = unlist(lapply(foo, paste, collapse=" "))
shaw$Pathogen_Original = foo
shaw$PMID[ is.na(shaw$PMID) ] = ""
shaw$ReferenceComb = paste(shaw$Reference, shaw$Additional, sep="; ")
shaw$ReferenceComb = paste("PMID:", shaw$PMID, "_Citations:", shaw$ReferenceComb, sep="")
# # =============== access publication year for Shaw; first for refs, then scrape PubMed ================
#
# # extract numerics (year) and trim out second year marker
# years = regmatches(shaw$Reference, gregexpr("[[:digit:]]+", shaw$Reference))
# shaw$YearRef = as.numeric(unlist(lapply(years, "[", 1)))
#
# # create dataframe of PMIDs to lookup
# shaw$idx = 1:nrow(shaw)
# query_df = shaw %>%
#   dplyr::select(idx, PMID, Pathogen_Original) %>%
#   dplyr::mutate(Database = "pubmed") %>%
#   dplyr::filter(!is.na(PMID))
#
# # function to lookup create and update dates from PubMed
# pubMedDateLookup = function(ids){
#
#   # result
#   e = simpleError("lookup error")
#
#   # lookup 5 attempts then break
#   e = simpleError("test error")
#   for(attempt in 1:5){
#     search = tryCatch(entrez_summary(db="pubmed", id=ids), error=function(e) e)
#     if(class(search)[1] != "simpleError"){ break }
#     Sys.sleep(0.5)
#   }
#
#   # if throws error
#   if(class(search)[1] == "simpleError"){
#     resx = data.frame(id = ids)
#     resx$PubDate = NA; resx$PubYear = NA
#     resx$Lookup = "Fail"
#     return(resx)
#
#   } else{
#     resx = data.frame(id = names(search))
#     pubdatenullfilter = function(x){
#       lx = x$pubdate
#       if(is.null(lx)){ lx = NA }
#       lx
#     }
#     resx$PubDate = unlist(lapply(search, pubdatenullfilter))
#     resx$PubYear = substr(resx$PubDate, 1, 4)
#     resx$Lookup = "Success"
#   }
#
#   # return
#   return(resx)
# }
#
# # batches
# batch = rep(1:1000, each=100); batch = batch[ 1:nrow(query_df) ]
# query_df$batch = batch
#
# # create filenames
# output_loc = "./output/"
# #save_file = paste(output_loc, "Shaw_Pubmedscrape_28122020_rentrez.csv", sep="")
#
# # append each new query to csv
# for(i in 1:n_distinct(query_df$batch)){
#
#   # run query
#   cat(paste(i, "...", sep=""))
#
#   e = simpleError("lookup error")
#   ids = query_df$PMID[ query_df$batch == unique(query_df$batch)[i] ]
#   lookupx = tryCatch(pubMedDateLookup(ids))
#   lookupx = rename(lookupx, "PMID" = id)
#   lookupx$PMID = as.numeric(as.vector(lookupx$PMID))
#
#   # combine with eid2 records
#   lookupx = left_join(query_df[ query_df$batch == unique(query_df$batch)[i], ], lookupx,  by="PMID")
#
#   # initialise file on first iteration, and then append
#   if(class(lookupx)[1] == "simpleError"){ next
#   } else if(i == 1){
#     write.csv(lookupx, save_file, row.names=FALSE)
#   } else{
#     write.table(lookupx, save_file, append=TRUE, sep=",", col.names=FALSE, row.names=FALSE, quote=TRUE) # append
#   }
#
#   # sleep system to reduce overload
#   Sys.sleep(0.5)
# }
#' # =============== save host names for lookup via taxize ================
#'
#' # hostnames, run through taxize script
#' hostnames = shaw %>%
#'   select(HostSpecies.new)
#' write.csv(hostnames, "./output/crossref_temp/Shaw_HostNames_formatching.csv", row.names=FALSE)
#'
# =============== reconcile pathogen names ==================
#
# # subset to just pathogen names and check whether name already in associations
# shawp = shaw %>%
#   dplyr::select(Pathogen_Original, Synonym) %>%
#   distinct() %>%
#   dplyr::mutate(InAssoc = ifelse(Pathogen_Original %in% assoc$Pathogen_Harmonised, TRUE, FALSE),
#                 Synonym = tolower(Synonym)) %>%
#   arrange(Pathogen_Original)
# shawp$Pathogen_Harmonised = ""
# shawp$Pathogen_Harmonised[ shawp$InAssoc == TRUE ] = shawp$Pathogen_Original[ shawp$InAssoc == TRUE ]
#
# # association names for cross-ref
# assocp = assoc %>%
#   dplyr::filter(PathogenType == "virus") %>%
#   dplyr::select(Pathogen_Harmonised) %>%
#   distinct() %>%
#   arrange(Pathogen_Harmonised)
# save both for cross-ref
# write.csv(shawp, "./output/crossref_temp/Shaw_virusnames_toharmonise.csv", row.names=FALSE)
# write.csv(assocp, "./output/crossref_temp/Assoc_virusnames_forreference.csv", row.names=FALSE)
# ====================== combine all datasets together and save Shaw metadata =======================
# shaw pathogen names reconciled
path = read.csv("./output/crossref_temp/Shaw_virusnames_harmonised_rg_gfa.csv", stringsAsFactors = FALSE) %>%
dplyr::select(Pathogen_Original, Pathogen_Harmonised)
shaw = left_join(shaw, path, by="Pathogen_Original")
# shaw years including additional column
years1 = regmatches(shaw$Reference, gregexpr("[[:digit:]]+", shaw$Reference))
additional = shaw$Additional
additional[ grep("DOI|doi|http", additional) ] = NA
years2 = regmatches(additional, gregexpr("[[:digit:]]+", additional))
for(i in 1:length(years1)){ years1[[i]] = c(years1[[i]], years2[[i]]) }
shaw$YearRef = as.numeric(as.vector(unlist(lapply(years1, function(x) min(x[ nchar(x) == 4])))))
shaw$YearRef[ shaw$YearRef >2019 & !is.na(shaw$YearRef)] = NA # couple of issues: remove year > 2019
# years scraped from pubmed
# years_pm = read.csv("./output/crossref_temp/Shaw_Pubmedscrape_12112020.csv", stringsAsFactors = FALSE) %>%
#   dplyr::filter(Lookup_Successful == TRUE) %>%
#   dplyr::select(PMID, Year) %>%
#   dplyr::rename("YearPubMed" = Year) %>%
#   dplyr::filter(!duplicated(PMID))
# shaw = left_join(shaw, years_pm)
# years
years_pm = read.csv("./output/crossref_temp/Shaw_Pubmedscrape_28122020_rentrez.csv", stringsAsFactors = FALSE) %>%
dplyr::select(PMID, PubYear) %>%
dplyr::rename("YearPubMed" = PubYear) %>%
dplyr::filter(!duplicated(PMID)) %>%
dplyr::mutate(PMID = as.character(PMID))
shaw = left_join(shaw, years_pm)
# how many have years? 19% in database; 90% from PubMed
sum(!is.na(shaw$YearRef))/nrow(shaw)
sum(!is.na(shaw$YearPubMed))/nrow(shaw)
# foo = shaw[ !is.na(shaw$YearPubMed), ]
# sum(foo$YearRef == foo$YearPubMed, na.rm=TRUE) / nrow(foo[ !is.na(foo$YearRef),])
# take earliest year of listed and PubMed scrape
shaw$Year = apply(shaw[ , c("YearRef", "YearPubMed")], 1, function(x) min(x[ !is.na(x) ]) )
shaw$Year[ shaw$Year == Inf ] = NA
shaw$YearType = ifelse(shaw$Year == shaw$YearPubMed, "PubMed publication", "Publication date from source database (earliest)")
# taxized hostnames
load("./output/crossref_temp/Shaw_names_matched_list.R")
sortSyns = function(x){
if(length(x) > 0){
return(  data.frame(Host_Original = x$Original[1],
Host_Harmonised = tolower(x$Accepted_name[1]),
# HostOrder = x$Selected_order,
# HostFamily = x$Selected_family,
# HostClass = x$Selected_class,
HostSynonyms = tolower(paste(x$Synonyms, collapse=", "))) )
}
}
syns = do.call(rbind.data.frame, lapply(synonyms_lookup, sortSyns)) %>%
dplyr::filter(!duplicated(Host_Original))
# combine with shaw and save shaw harmonised with metadata
shaw$Host_Original = tolower(shaw$HostSpecies.new)
shaw = left_join(shaw, syns)
shaw$HostClass = "Mammalia"
write.csv(shaw, "./output/hostpathogen_harmonised/Shaw_MammalViruses_AllHarmonised_RG_GA.csv", row.names=FALSE)
# subset to relevant columns, combine with assoc, subset to mammals only
shaw_sub = shaw[ , c("Pathogen_Original", "Pathogen_Harmonised", "Type", "Host_Original", "Host_Harmonised", "HostClass",
"HostOrder", "HostFamily", "HostSynonyms", "Year", "YearType", "Method", "ReferenceComb")] %>%
dplyr::rename("PathogenType" = Type, "DetectionMethod_Original" = Method, "Reference" = "ReferenceComb") %>%
dplyr::mutate(Database = "Shaw",
ReferenceType = "Publication and/or PMID",
PathogenType = tolower(PathogenType))
assoc = assoc[ , which(names(assoc) %in% names(shaw_sub)) ]
assoc = assoc[ assoc$HostClass == "Mammalia" & assoc$PathogenType == "virus", ]
assoc = rbind(assoc, shaw_sub)
# note on database version
database_version = data.frame(Database=c("EID2", "Shaw", "GMPD2", "HP3"), DatabaseVersion = c("Wardeh et al. 2015 Sci Data", "Shaw et al. 2020 Mol Ecol", "Stephens et al. 2017 Ecology", "Olival et al. 2017 Nature"))
assoc = left_join(assoc, database_version)
# ------------ manual corrections to pathogen synonymy in complete database ---------------
# 1. "human polyomavirus" just listed as polyomavirus in Olival but 2 strains in Shaw; check Olival assoc and change to either
# 2. "human mastadenovirus a-f" and "human adenovirus a-f" are synonymous:
# 3. "human enterovirus b and c" -> "enterovirus b - c"
# 3. Shaw lists 3 sub-strains of feline sarcoma virus, but just listed as one in other datasets: have aggregated to one for now
# correction of problems: remove pathogens not classified to genus/sp
assoc = assoc[ !is.na(assoc$Pathogen_Harmonised), ]
assoc$Pathogen_Harmonised[ assoc$Pathogen_Harmonised == "human enterovirus b" ] = "enterovirus b"
assoc$Pathogen_Harmonised[ assoc$Pathogen_Harmonised == "human enterovirus c" ] = "enterovirus c"
assoc$Pathogen_Harmonised[ assoc$Pathogen_Harmonised == "human mastadenovirus a" ] = "human adenovirus a"
assoc$Pathogen_Harmonised[ assoc$Pathogen_Harmonised == "human mastadenovirus b" ] = "human adenovirus b"
assoc$Pathogen_Harmonised[ assoc$Pathogen_Harmonised == "human mastadenovirus c" ] = "human adenovirus c"
assoc$Pathogen_Harmonised[ assoc$Pathogen_Harmonised == "human mastadenovirus d" ] = "human adenovirus d"
assoc$Pathogen_Harmonised[ assoc$Pathogen_Harmonised == "human mastadenovirus e" ] = "human adenovirus e"
assoc$Pathogen_Harmonised[ assoc$Pathogen_Harmonised == "human mastadenovirus f" ] = "human adenovirus f"
assoc$Pathogen_Harmonised[ assoc$Pathogen_Harmonised == "human polyomavirus" ] = "human polyomavirus 1"
# hosts that do not harmonise to taxize for shaw; corrected for prev datasets
assoc$Host_Harmonised[ assoc$Host_Original == "felis catus" & assoc$Database == "Shaw" ] = assoc$Host_Harmonised[ assoc$Host_Original == "felis catus" & assoc$Database == "EID2" ][1]
assoc$HostSynonyms[ assoc$Host_Original == "felis catus" & assoc$Database == "Shaw" ] = assoc$HostSynonyms[ assoc$Host_Original == "felis catus" & assoc$Database == "EID2" ][1]
assoc$Host_Harmonised[ assoc$Host_Original == "physeter catodon" & assoc$Database == "Shaw" ] = "physeter macrocephalus"
assoc$HostSynonyms[ assoc$Host_Original == "physeter catodon" & assoc$Database == "Shaw" ] = "physeter catodon"
assoc$Host_Harmonised[ assoc$Host_Original == "balaena mysticetus" & assoc$Database == "Shaw" ] = "balaena mysticetus"
assoc$HostSynonyms[ assoc$Host_Original == "balaena mysticetus" & assoc$Database == "Shaw" ] = ""
# fix NAs in synonyms
assoc$HostSynonyms[ assoc$HostSynonyms == "na" ] = ""
# set artiodactyls
assoc$HostOrder[ assoc$HostOrder %in% c("Artiodactyla", "Cetacea") ] = "Cetartiodactyla"
# order, keep only distinct records, and save
assoc = assoc %>%
dplyr::arrange(HostOrder, Host_Harmonised, Pathogen_Harmonised, Database) %>%
dplyr::select(Host_Harmonised, Host_Original, HostClass, HostOrder, HostFamily, Pathogen_Harmonised, Pathogen_Original, PathogenType, Database, DatabaseVersion, Reference, ReferenceType, Year, YearType,
DetectionMethod_Original, HostSynonyms) %>%
distinct()
# ============= EID2 reports multiple instances of same association using nuccore/PMID; collapse down to one record per year ==============
# combine multiple records from EID2
ei = assoc[ assoc$Database == "EID2", ]
# subset
combx = ei %>%
group_by(Host_Harmonised, Pathogen_Harmonised, Year, ReferenceType) %>%
dplyr::summarise(Reference = paste(Reference, collapse="; "))
# combine with eid
ei = ei %>%
dplyr::select(-Reference) %>%
distinct() %>%
left_join(combx)
assoc = rbind(ei, assoc[ assoc$Database != "EID2", ])
# any EID2 entries based on NCBI Nucleotide labelled as "PCR"
assoc$DetectionMethod_Original[ assoc$Database == "EID2" & assoc$ReferenceType == "NCBI Nucleotide" ] = "NCBI Nucleotide"
head(assoc)
# detection methods
dm = assoc[ !duplicated(assoc$DetectionMethod_Original), c("DetectionMethod_Original"), drop=FALSE ]
# none reported
det0 = c("na", "CargoCarrier", "Other")
dm$Detection_NotSpecified = ifelse(dm$DetectionMethod_Original %in% det0 | is.na(dm$DetectionMethod_Original), TRUE, FALSE)
# serology/antibody-based methods
sero = c("bcELISA", "Antibodies", "Serology", "plaque reduction neutralization", "ELISA", "SNT", "ELISA, SNT", "PAGE", "VNT", "PAGE", "hemmaglutination", "virus neutralization",
"Direct Fluorescent Antibody Testing", "CF", "VNT, ELISA", "agar gel immunodiffusion", "IFA", "antigen", "Antigens", "Antigen", "Hemagglutination inhibition assay; Neutralization test",
"PRNT", "NT", "neutralization test", "ELISA and plaque reduction", "PHA", "SouthernBlot", "Antibodies and Isolation")
dm$Detection_Serology = ifelse(dm$DetectionMethod_Original %in% sero, TRUE, FALSE)
# genetic detection methods
gen_det = c("PCR", "Cell culture, PCR", "PCR, Isolation", "DNA RFLP", "EM, DNA (i.e. more than just PCR)", "Pyroseq", "RNA", "NCBI Nucleotide")
dm$Detection_Genetic = ifelse(dm$DetectionMethod_Original %in% gen_det, TRUE, FALSE)
head(dm)
# pathogen direct isolation/observation within/from tissue
# this could be more nuanced
iso_det = c("DirectBlood", "DirectFecal", "DirectOther", "Tissue", "Fecal", "Isolation", "histopath, e-microscopy", "histopath; e microscopy", "isolation", "Cell culture", "micropsy", "Antibodies and Isolation", "Pathology", "Histopathology", "Histology", "PCR, Isolation", "Cell culture, PCR")
dm$Detection_Isolation = ifelse(dm$DetectionMethod_Original %in% iso_det, TRUE, FALSE)
# composite column of highest quality detection
dm$DetectionMethod_Harmonised = "Not specified"
dm$DetectionMethod_Harmonised[ dm$Detection_Serology == TRUE ] = "Antibodies"
dm$DetectionMethod_Harmonised[ dm$Detection_Genetic == TRUE ] = "PCR/Sequencing"
dm$DetectionMethod_Harmonised[ dm$Detection_Isolation == TRUE ] = "Isolation/Observation"
# combine and save for NCBITaxonomy resolving
assoc = left_join(assoc, dm, by="DetectionMethod_Original")
head(assoc)
write.csv(assoc, "./output/intermediate_versions/Clover_reconciledassociations_v1_20201120.csv", row.names=FALSE)
# dependencies and basedir
setwd("C:/Users/roryj/Documents/PhD/202011_clover/clover/")
pacman::p_load("dplyr", "magrittr")
# associations data
assoc = read.csv("./output/intermediate_versions/Clover_reconciledassociations_v1_20201120.csv", stringsAsFactors = FALSE)
assoc = assoc[ !assoc$Pathogen_Harmonised %in% c("bse agent", "pepper mild mottle"), ]
head(assoc)
# viruses from NCBI taxonomy, with fuzzy matches manually checked
vir_checked = read.csv("./output/poisot_ncbitaxonomy/clover-viruses-poisot-rgchecked.csv", stringsAsFactors = FALSE)
# correct all data for species with fuzzy matches
viruses = vir_checked %>%
dplyr::filter(rg_updated==TRUE & !is.na(rg_updated))
viruses$species = viruses$species_updated
viruses$order = viruses$order_updated
viruses$family = viruses$family_updated
viruses$class = viruses$class_updated
viruses$genus = viruses$genus_updated
viruses$ncbiexact = ifelse(viruses$unresolved_notes == "", TRUE, FALSE)
viruses = viruses[ , c("name", "class", "order", "family", "genus", "species", "ncbiexact") ]
# viruses without issues
vir_exact = vir_checked[ !vir_checked$name %in% viruses$name, ] %>%
dplyr::select(name, class, order, family, genus, species) %>%
dplyr::mutate(ncbiexact = TRUE)
# combine all viruses with taxonomic information
vir = rbind(viruses, vir_exact)
vir = vir[ vir$name != "bse agent", ]
#all(vir$name %in% assoc$Pathogen_Harmonised); all(assoc$Pathogen_Harmonised %in% vir$name)
names(vir) = c("Pathogen_Harmonised", "VirusClass", "VirusOrder", "VirusFamily", "VirusGenus", "Virus", "Virus_NCBIResolved")
# combine and rename cols
assoc = left_join(assoc, vir, by="Pathogen_Harmonised") %>%
dplyr::select(-Pathogen_Harmonised) %>%
dplyr::rename("Virus_Original" = Pathogen_Original)
nrow(assoc)
any(is.na(assoc$Virus))
head(assoc)
# 2a. update hosts from NBCITaxonomy lookup
hosts = read.csv("./output/poisot_ncbitaxonomy/conflicts-poisot-rg-family.csv", stringsAsFactors = FALSE) %>%
dplyr::filter(type == "hosts") %>%
dplyr::filter(rg_updated==TRUE & !is.na(rg_updated))
# replace corrected fuzzy match records (rg)
hosts$species = hosts$species_updated
hosts$order = hosts$order_updated
hosts$family = hosts$family_updated
hosts$class = hosts$class_updated
hosts$ncbiexact = ifelse(hosts$unresolved.notes == "", TRUE, FALSE)
hosts = hosts[ , c("name", "order", "family", "species", "ncbiexact") ]
# combine, and for all viruses where pathogen_harmonised is correct, assign this to virusspecies_harmonised column
hosts = hosts %>%
dplyr::rename("Host_Harmonised"=1, "HostOrder_2"=2, "HostFamily_2" =3, "HostHarm_2" = 4, "Host_NCBIResolved" = 5)
assoc = left_join(assoc, hosts, by="Host_Harmonised")
assoc$HostHarm_2[ is.na(assoc$HostHarm_2) ] = assoc$Host_Harmonised[ is.na(assoc$HostHarm_2) ]
assoc$HostOrder_2[ is.na(assoc$HostOrder_2) ] = assoc$HostOrder[ is.na(assoc$HostOrder_2) ]
assoc$HostFamily_2[ is.na(assoc$HostFamily_2) ] = assoc$HostFamily[ is.na(assoc$HostFamily_2) ]
assoc$Host_NCBIResolved[ is.na(assoc$Host_NCBIResolved) ] = TRUE
assoc$HostHarm_2 = Hmisc::capitalize(assoc$HostHarm_2)
# replace and rename host harmonised
assoc = assoc %>%
dplyr::mutate(Host_Harmonised = HostHarm_2,
HostOrder = HostOrder_2,
HostFamily = HostFamily_2) %>%
dplyr::select(-HostHarm_2, -HostOrder_2, -HostFamily_2) %>%
dplyr::rename("Host" = Host_Harmonised,
"DetectionMethod" = DetectionMethod_Harmonised) %>%
dplyr::mutate(Host_Original = Hmisc::capitalize(Host_Original),
Virus_Original = Hmisc::capitalize(Virus_Original),
PathogenType = "Virus")
head(assoc)
# reorder columns
assoc = assoc %>%
dplyr::select(Host, HostClass, HostOrder, HostFamily, Virus, VirusClass, VirusOrder, VirusFamily, VirusGenus, Year, YearType, Database, DatabaseVersion, Reference, ReferenceType,
DetectionMethod, Detection_NotSpecified, Detection_Serology, Detection_Genetic, Detection_Isolation,
Host_Original, Virus_Original, DetectionMethod_Original, Host_NCBIResolved, Virus_NCBIResolved, HostSynonyms) %>%
distinct()
any(is.na(assoc$Host))
# iucn
iucn = sf::st_read("C:/Users/roryj/Documents/PhD/202011_clover/data/iucn_range/MAMMALS/MAMMALS.shp")
# issues
issues = assoc[ !assoc$Host %in% iucn$binomial, ] %>%
dplyr::select(Host, HostClass, HostOrder, HostFamily, Host_Original, HostSynonyms, Host_NCBIResolved) %>%
distinct()
# manual comparison of NCBITaxonomy, IUCN and full database to determine current host name
# the vast majority are homotypic synonyms in NCBI; manually corrected for IUCN and phylogeny harmonising and synonyms updated
issues_rg = read.csv("./output/iucn_crossref/HostIssues_CLOVER_rg.csv", stringsAsFactors = FALSE) %>%
dplyr::filter(Record_Updated == TRUE)
# correct issues in assoc database 1: domestic dog across all records ahnd "Artiodactyla"
assoc$Host[ assoc$Host_Original == "Canis lupus familiaris" ] = "Canis lupus familiaris"
assoc$HostOrder[ assoc$HostOrder == "Artiodactyla" ] = "Cetartiodactyla"
# resolve
foo = assoc[ assoc$Host %in% issues_rg$Host, ] %>%
left_join(issues_rg) %>%
dplyr::mutate(Host = Host2,
HostSynonyms = HostSynonyms2,
HostFamily = HostFamily2) %>%
dplyr::select(-Host_IUCNMatch, -Record_Updated, -Description_Of_Issue, -Host2, -HostSynonyms2, -HostFamily2)
# combine, order and save
assoc_updated = rbind( assoc[ !assoc$Host %in% issues_rg$Host, ], foo) %>%
dplyr::arrange(HostOrder, Host, VirusOrder, Virus)
# flag species in assoc that are domestic
load("./data/domesticspecies_list/domestic_species.R")
domestic = c(domestic, "canis familiaris",
"bos frontalis",
"bos grunniens",
"bos taurus indicus",
"bos taurus primigenius",
"bubalus bubalis",
"bubalus carabanensis",
"lama glama guanicoe",
"vicugna pacos")
domestic = Hmisc::capitalize(domestic)
head(domestic)
# flag species in assoc that are domestic
load("./data/domesticspecies_list/domestic_species.R")
domestic = data.frame(Host = domestic, IsDomestic = 1, Source = "EID2")
domestic
domestic = rbind(domestic, data.frame(Host = c("canis familiaris",
"bos frontalis",
"bos grunniens",
"bos taurus indicus",
"bos taurus primigenius",
"bubalus bubalis",
"bubalus carabanensis",
"lama glama guanicoe",
"vicugna pacos"),
IsDomestic = 1,
Source = "Gibb"))
domestic
domestic$Host == Hmisc::capitalize(domestic$Host)
domestic$Host = Hmisc::capitalize(domestic$Host)
domestic
# flag species in assoc that are domestic
load("./data/domesticspecies_list/domestic_species.R")
domestic = data.frame(Host = domestic, IsDomestic = 1, Source = "EID2")
domestic = rbind(domestic, data.frame(Host = c("canis familiaris",
"bos frontalis",
"bos grunniens",
"bos taurus indicus",
"bos taurus primigenius",
"bubalus bubalis",
"bubalus carabanensis",
"lama glama guanicoe",
"vicugna pacos"),
IsDomestic = 1,
Source = "Gibb"))
domestic$Host = Hmisc::capitalize(as.vector(domestic$Host))
head(Domestic)
head(domestic)
domestic
head(assoc_updated)
# create
meta = data.frame(ColName = colnames(assoc_updated))
meta
meta$Description = c("Host species (first taxized and then resolved against NCBI Taxonomy, with outstanding issues cross-referenced to IUCN)",
"Host taxonomic class",
"Host taxonomic order",
"Host taxonomic family",
"Virus species (manually harmonised across datasets, then resolved against NCBI Taxonomy)",
"Virus taxonomic class",
"Virus taxonomic order",
"Virus taxonomic family",
"Virus taxonomic genus",
"Year association was reported (if multiple year were included in source database record, the earliest is reported)",
"How was year obtained? Either scientific publication, listed in source database, or scraped from PubMed PMID or NCBI Nucleotide. If year is NA, it was not possible to resolve from source database",
"Source database",
"Version of source database that was accessed for CLOVER",
"Citation as provided in original dataset",
"Description of citation type (publication name; PubMed ID; NCBI Nucleotide ID)",
"Detection method (reconciled and harmonised to a simple classification system)",
"True/false flag",
"True/false flag",
"True/false flag",
"True/false flag",
"Host species as listed in source database",
"Virus species as listed in source database",
"Detection method as described in source database",
"Does host species name have an exact match in NCBITaxonomy? True/false",
"Does virus species name have an exact match in NCBITaxonomy? True/false",
"Synonyms of host species, accessed from taxize")
meta
head(meta)
tail(meta)
write.csv(meta, "./output/Clover_v1.0_ColumnDescriptions_20201218.csv")
head(assoc_updated)
write.csv(assoc_updated, "./output/Clover_v1.0_NBCIreconciled_20201218.csv", row.names=FALSE)
write.csv(domestic, "./data/domestic_status/HostLookup_Domestic.csv", row.names=FALSE)
domestic
clover = read.csv("./output/Clover_v1.0_NBCIreconciled_20201218.csv", stringsAsFactors = FALSE)
n_distinct(clover$Host)
n_distinct(clover$Virus)
cl = clover %>%
group_by(Host, Virus) %>%
dplyr::summarise(Detection_Serology = ifelse(sum(Detection_Serology > 0), 1, 0),
Detection_Genetic = ifelse(sum(Detection_Genetic > 0), 1, 0),
Detection_Isolation = ifelse(sum(Detection_Isolation > 0), 1, 0))
cl
sum(cl$Detection_Genetic)
sum(cl$Detection_Genetic) / nrow(cl)
sum(cl$Detection_Serology) / nrow(cl)
sum(cl$Detection_Serology)
nrow(cl$Host == "Homo sapiens")
sujm(cl$Host == "Homo sapiens")
sujm(cl$Host == "Homo sapiens")
sum(cl$Host == "Homo sapiens")
nrow(cl)
head(cl)
sero_only = sum(cl$Detection_Serology == 1 & (cl$Detection_Genetic + cl$Detection_Isolation == 0))
sero_only
2257/5494
sero_only = sum(cl$Detection_Serology == 0 & (cl$Detection_Genetic + cl$Detection_Isolation)>0)
sero_only
2605/nrow(cl)
47 + 41
sum(cl$Detection_Serology == 0 & ((cl$Detection_Genetic + cl$Detection_Isolation) > 0))
sum(cl$Detection_Serology == 0 & cl$Detection_Genetic ==0 & cl$Detection_Isolation == 0)
56/nrow(cl)
head(cl)
cl$Detection_Genetic + cl$Detection_Isolation == 2
sum(cl$Detection_Genetic + cl$Detection_Isolation == 2)
873 / nrow(cl)
9000*0.05
# eid2 for mammals and birds only
eid2 = read.csv("./data/EID2_SpeciesInteractions_Wardeh2015.csv", stringsAsFactors = FALSE) %>%
dplyr::filter(Carrier.classification %in% c("Human", "Mammal", "Domestic", "Primate", "Rodent", "Aves"))
# root dir and dependencies
# dependencies and basedir
install.packages("here")
here::here()
